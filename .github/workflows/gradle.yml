name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy: 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: make application.yml
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # Spring Boot 어플리케이션 Build (1)
    - name: Spring Boot Build
      run: ./gradlew clean build -x test
    
    # Docker 이미지 Build (2)
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-docker . #image명 기입
    
    # DockerHub Login (3)
    - name: docker login 
      uses: docker/login-action@v2
      with: 
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Docker Hub push (4)
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-docker
      
    # GET GitHub IP
    - name: Get GitHub IP 
      id: ip
      uses: haythem/public-ip@v1.2  
      
    # Configure AWS Credentials - AWS 접근 권한 취득(IAM)
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2 # AWS EC2 지역명 기입
      
    # Add github ip to AWS
    - name: Add GitHub IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      
    # AWS EC2 Server Connect & Docker 명령어 실행 (8)
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEY }} # pem 키
        
        # 도커 작업
        script: |
          sudo docker stop ${{ secrets.DOCKER_USERNAME }}/spring-docker
          sudo docker rm ${{ secrets.DOCKER_USERNAME }}/spring-docker
          sudo docker run -d --log-driver=syslog -p 8080:8080 -v ${{ secrets.DOCKER_USERNAME }}:/app ${{ secrets.DOCKER_USERNAME }}/spring-docker

   # REMOVE Github IP FROM security group (9)
    - name: Remove IP FROM security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
