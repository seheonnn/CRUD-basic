name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  deploy: 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: make application.yml
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # Spring Boot 어플리케이션 Build (1)
    - name: Spring Boot Build
      run: |
        echo "Running ./gradlew clean"
        ./gradlew clean
        echo "Running ./gradlew build -x test"
        ./gradlew build -x test
        
    # Build Context로 사용할 디렉토리로 이동
    - name: Change to build directory
      run: cd YOUR_PROJECT_DIRECTORY
      
    # 빌드할 JAR 파일을 Build Context로 복사
    - name: Copy JAR to Build Context
      run: cp build/libs/*.jar ./
    
    # Docker 이미지 Build
    - name: docker image build
      run: sudo docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/spring-docker .
    

    # DockerHub Login (3)
    - name: docker login 
      uses: docker/login-action@v2
      with: 
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Docker Hub push (4)
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-docker
    
      
    # AWS EC2 Server Connect & Docker 명령어 실행 (8)
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEY }} # pem 키
        
        # 도커 작업
        script: |
          sudo docker stop spring-docker
          sudo docker rmi spring-docker
          sudo docker run -it -d -p 8080:8080 --name spring-docker ${{ secrets.DOCKER_USERNAME }}/spring-docker

  
