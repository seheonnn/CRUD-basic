name: Java CI/CD with Gradle

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:

          java-version: '17'
          distribution: 'temurin'

      - name: 2) Convert to prod config
        run: |
          cd ./src/main/resources
          [ -e "application.yml" ] && rm application.yml
          echo "spring:" > application.yml
          echo "  profiles:" >> application.yml
          echo "    active: local" >> application.yml

#      - name: 3) Set prod.yml
#        uses: microsoft/variable-substitution@v1
#        with:
#          files: ./src/main/resources/application-prod.yml
#        env:
#          spring.datasource.url: ${{ secrets.DB_URL }}
#          spring.datasource.username: ${{ secrets.DB_USER }}
#          spring.datasource.password: ${{ secrets.DB_PW }}

      - name: Start DB with Docker Compose
        run: |
          docker compose up -d

      - name: Grant execute permission for gradlew and build
        run: |
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew build -x test

  cd:
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew and build
        run: |
          chmod +x ./gradlew
          ./gradlew clean
          ./gradlew build -x test

      # Docker image Build (1)
      - name: Docker image build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-docker --pull --no-cache --platform linux/amd64 .

      # DockerHub Login (2)
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Hub push (3)
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-docker

      # AWS EC2 Server Connect & Docker command execution
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # EC2 instance public DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }} # pem key
          script: |
            sudo docker stop spring-docker
            sudo docker rm spring-docker
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/spring-docker
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/spring-docker
            
            sudo docker run -it -d -p 8080:8080 --name spring-docker -e TZ=Asia/Seoul ${{ secrets.DOCKER_USERNAME }}/spring-docker
#            sudo docker network create my-network
#            sudo docker run --name my-redis --network my-network -d redis
#            sudo docker run -it -d -p 8080:8080 --name spring-docker -e TZ=Asia/Seoul --network my-network ${{ secrets.DOCKER_USERNAME }}/spring-docker

